---
title: "" 
author: "<span style='color: #68218a;'>by Tomasz Woźniak</span>"
email: "tomasz.wozniak@unimelb.edu.au"
title-slide-attributes:
  data-background-color: "#bf3eff"
number-sections: false
format: 
  revealjs: 
    theme: [simple, theme.scss]
    slide-number: c
    transition: concave
    smaller: true
    multiplex: true
execute: 
  echo: true
  cache: true
---


```{r}
#| echo: false
blu = "#bf3eff"
yel = "#68218a"
```


##  {background-color="#bf3eff"}

![](WOMBAT25.png){.absolute top=40 right=275 width="500"}



## <span style='color: #68218a;'>About me</span> {background-color="#bf3eff"}

[Tomasz Woźniak](https://github.com/donotdespair)

* senior lecturer in econometrics at the unimelb
* econometrician: Bayesian time series analyst
* develops methods for applied macro research
* loves cycling, yoga, books, volunteering, contemporary theatre, music, and arts
* I am nice!

## <span style='color: #68218a;'>About me</span> {background-color="#bf3eff"}

[Tomasz Woźniak](https://github.com/donotdespair)

* **R** enthusiast and specialised user for 17 years
* **C++** coder since 2021
* associate editor of the [R Journal](https://journal.r-project.org/)
* author of **R** packages [**bsvars**](https://bsvars.org/bsvars/) and [**bsvarSIGNs**](https://bsvars.org/bsvarSIGNs/)


![](bsvars.org.png){.absolute top=350 right=675 width="250"}
![](bsvars.png){.absolute top=350 right=425 width="250"}
![](bsvarSIGNs.png){.absolute top=350 right=175 width="250"}







# <span style='color: #68218a;'>Motivation</span> {background-color="#bf3eff"}

## <span style='color: #68218a;'>Motivation</span> {background-color="#bf3eff"}

* Compiled code written in **C++** runs much faster than interpreted code in **R**
* Coding in **C++** for **R** applications has always been possible
* It requires:
  * writing **C++** code
  * compiling it, and
  * linking it to **R**
* Difficulties:
  * tedious object-oriented programming
  * necessity of assuring object compatibility
* Benefits are great, but the cost was too high

## <span style='color: #68218a;'>Motivation</span> {background-color="#bf3eff"}

* **Rcpp** is a family of packages by Dirk Eddelbuetel et al. facilitating the application of **C++** in **R**
* An interface for communication between **R** and **C++**
* Greatly simplifies the workflow
* Easier to benefit from the best of the two worlds:
  * **C++** programs are pre-compiled assuring fast computations\
  *perfect for writing functions*
  * **R** code is interpreted and dynamic:\
  *perfect for data analysis*

## <span style='color: #68218a;'>Objectives for this session</span> {background-color="#bf3eff"}

* to facilitate working with **C++** in **R** applications
* to perform a sequence of exercises
* to focus on:
  * basic programming structures
  * functional programming
  * object types: scalars, vectors, matrices, lists, etc.
  * linear algebra
  * statistical distributions

## <span style='color: #68218a;'>Materials for this session</span> {background-color="#bf3eff"}

* Lecture slides
* **C++** scripts:
  * [`nicetry.cpp`](https://github.com/donotdespair/w4UKR_cpp4Rapp/blob/master/nicetry.cpp)
  * [`nicelr.cpp`](https://github.com/donotdespair/w4UKR_cpp4Rapp/blob/master/nicelr.cpp)
  * [`nicelist.cpp`](https://github.com/donotdespair/w4UKR_cpp4Rapp/blob/master/nicelist.cpp)
  * [`nicerig2.cpp`](https://github.com/donotdespair/w4UKR_cpp4Rapp/blob/master/nicerig2.cpp)

## <span style='color: #68218a;'>Learning resources</span> {background-color="#bf3eff"}

* This session!
* vignettes: for packages [**Rcpp**](https://cran.r-project.org/package=Rcpp) and [**RcppArmadillo**](https://cran.r-project.org/package=RcppArmadillo)
* online resources:
  * [**Armadillo** library documentation](https://arma.sourceforge.net/docs.html)
  * [RcppGallery](https://gallery.rcpp.org/)
  * [stackoverflow.com tag:rcpp](https://stackoverflow.com/questions/tagged/rcpp)
* François, R., [*Optimizing R Code with Rcpp*](https://www.datacamp.com/courses/optimizing-r-code-with-rcpp) on datacamp
* Tsuda, M., [*Rcpp for everyone*](https://teuder.github.io/rcpp4everyone_en/)
* Eddelbuettel, D., [*Seamless R and C++ Integration with Rcpp*](https://doi.org/10.1007/978-1-4614-6868-4)






## <span style='color: #68218a;'>Preparation</span> {background-color="#bf3eff"}

* Follow the instructions from Section 1.3. by [Eddelbuettel & François (2023)](https://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-FAQ.pdf)

$$ $$

* Install a **C++** compiler:
  * Windows: install [**RTools**](https://cran.r-project.org/bin/windows/Rtools/)
  * macOS: install [**Xcode Command Line Tools**](https://www.freecodecamp.org/news/install-xcode-command-line-tools/) and [**gfortran**](https://www.scivision.dev/homebrew-install-fortran-compiler/)
  * Linux: install the standard development packages.
* Install the **Rcpp** and **RcppArmadillo** packages by running in **R**: 
```{r}
#| eval: false

install.packages(Rcpp); library(Rcpp)
install.packages(RcppArmadillo); library(RcppArmadillo)
```
* Check if the installation is successful. Source the file [`nicetry.cpp`](https://github.com/donotdespair/w4UKR_cpp4Rapp/blob/master/preparation/nicetry.cpp) in RStudio by executing: `Rcpp::sourceCpp("nicetry.cpp")`. If you see a matrix with values 1, 2, and 3 in R, you're good to go for the workshop.



# <span style='color: #68218a;'>The first steps with Rcpp</span> {background-color="#bf3eff"}

## <span style='color: #68218a;'>The first steps with Rcpp</span> {background-color="#bf3eff"}

Consider the following **C++** applications in **R**:

* Define a **C++** function in an **R** script
  * promptly available for fast computations
* Develop a **C++** function in a `.cpp` file
  * perfect for developing, testing, and benchmarking
* Use a function from a `*.cpp` file in **R** computations
  * perfect for elaborate projects
* Develop an **R** package using **C++** code
  * perfect for sharing your work with the community


## <span style='color: #68218a;'>Define a **C++** function in an **R** script</span> {background-color="#bf3eff"}

```{r}
Rcpp::cppFunction('
  DataFrame nicetry (int n) {
    NumericVector v = rnorm(n);
    IntegerVector x = seq_len(n);
    LogicalVector y = v > 0;
    CharacterVector z(n, "nice");
    return DataFrame::create(_["v"] = v, _["x"] = x, _["y"] = y, _["z"] = z);
  }
')
nicetry(2)
```

## <span style='color: #68218a;'>Develop a **C++** function in a `nicetry.cpp` file</span> {background-color="#bf3eff"}

A `*.cpp` file sample contents:

```{Rcpp rcpp_df}
#include <Rcpp.h>
using namespace Rcpp;

// [[Rcpp::export]]
List nicetry (int n) {
  NumericVector v = rnorm(n);
  IntegerVector x = seq_len(n);
  LogicalVector y = v > 0;
  CharacterVector z(n, "nice");
  return List::create(_["v"] = v, _["x"] = x, _["y"] = y, _["z"] = z);
}
/*** R
nicetry(2)
*/
```

## <span style='color: #68218a;'>Develop a **C++** function in a `.cpp` file</span> {background-color="#bf3eff"}

The script includes:

* **Rcpp** library and `namespace` declarations (skip: `Rcpp::`)

```{Rcpp rcpp_df1, eval = FALSE}
#include <Rcpp.h>
using namespace Rcpp;
```

* **Rcpp** marker to export the `nicetry` function to R

```{Rcpp rcpp_df2, eval = FALSE}
// [[Rcpp::export]]
```

* sample **R** script

```{Rcpp rcpp_df3, eval = FALSE}
/*** R
nicetry(2)
*/
```


## <span style='color: #68218a;'>Develop a **C++** function in a `.cpp` file</span> {background-color="#bf3eff"}

The script includes:

* the function definition

```{Rcpp rcpp_df4, eval = FALSE}
List nicetry (                    // output type and function name
    int n                         // input type and name
) {
  NumericVector v = rnorm(n);     // define a numeric vector and fill it
  IntegerVector x = seq_len(n);   // define an integer vector as a sequence
  LogicalVector y = v > 0;        // define a logical vector
  CharacterVector z(n, "nice");   // define a character vector
  // return a list with the created vectors
  return List::create(_["v"] = v, _["x"] = x, _["y"] = y, _["z"] = z);
}
```


## <span style='color: #68218a;'>Develop a **C++** function in a `.cpp` file</span> {background-color="#bf3eff"}

::: {.callout-caution title="Your turn!"}
Develop a **C++** function that creates a `Tx3` matrix with:

* an integer `T` as the only argument
* a constant term column: `NumericVector i(n, 1.0);`
* a linear trend $t - \bar{t}$ column
* a quadratic trend $(t - \bar{t})^2$ column

where $t$ goes from $1$ to $T$, and $\bar{t}$ is the mean of sequence $t$.

* create `NumericVector`s and assemble as `NumericMatrix`
* use functions `cumsum`, `mean`, `pow`, and `cbind`.

Get some help [HERE](https://teuder.github.io/rcpp4everyone_en/080_vector.html).
:::



## <span style='color: #68218a;'>Use a function from a `nicelist.cpp` file in **R**</span> {background-color="#bf3eff"}

* `nicelist.cpp` file contents:

```{Rcpp rcpp_df5, eval = FALSE}
#include <Rcpp.h>
using namespace Rcpp;

// [[Rcpp::export]]
List nicelist (int n) {
  NumericVector p = rnorm(n);
  NumericVector s(n);
  for (int i=0; i<n; i++) {
    s[i] =  pow(p[i], 2);
  }
  return List::create(_["p"] = p, _["s"] = s);
}
```

## <span style='color: #68218a;'>Use a function from a `nicelist.cpp` file in **R**</span> {background-color="#bf3eff"}

* **R** script using the function from `nicelist.cpp`:

```{r nicelist}
Rcpp::sourceCpp("nicelist.cpp")
nicelist(3)
```


## <span style='color: #68218a;'>Develop a **C++** function in a `.cpp` file</span> {background-color="#bf3eff"}

::: {.callout-caution title="Your turn!"}
Consider a Gaussian random walk:
$$
y_t = y_{t-1} + \varepsilon_t, \qquad \varepsilon_t \sim N(0,1), \qquad y_0 = 0
$$
Develop a **C++** function that:

* has an integer `T` as the only argument
* returns a `T`-vector with Gaussian random walk\

Hint: use functions `rnorm` and `cumsum`.
:::









# <span style='color: #68218a;'>Some stats with RcppArmadillo</span> {background-color="#bf3eff"}

## <span style='color: #68218a;'>Some stats with RcppArmadillo</span> {background-color="#bf3eff"}

* Data objects from **Rcpp** have limited functionality\
* **Armadillo** is a **C++** library for linear algebra that
  * provides a rich set of functions
  * has a simple and intuitive syntax
  * includes fast linear algebra routines, and
  * fast random number generators
  * has fantastic [documentation](http://arma.sourceforge.net/docs.html)\
  
* **RcppArmadillo** is a simplified interface with **Armadillo**
  * allows seamless integration with **Rcpp**
  * easily passes data between **R** and **C++**


## <span style='color: #68218a;'>Some stats with RcppArmadillo: IG2 distribution</span> {background-color="#bf3eff"}

Sampling random draws from an inverted gamma 2 distribution.

A positive random variable $\sigma^2$ following an inverted gamma 2 distribution with positive scale $s$ and shape $\nu$ parameters is denoted by:
$$
\sigma^2 \sim IG2\left(s, \nu\right)
$$

1. Generate random draw $x$ from $\chi^2(\nu)$
2. Return $\frac{s}{x}$

## <span style='color: #68218a;'>Some stats with RcppArmadillo: IG2 distribution</span> {background-color="#bf3eff"}

Contents of a `nicerig2.cpp` file:

```{Rcpp nicerig2}
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]
using namespace arma;

// [[Rcpp::export]]
vec nicerig2 (
  const int n, 
  const double s, 
  const double nu
) {
  vec rig2 = s / chi2rnd( nu, n );
  return rig2;
}

/*** R
nicerig2(2, 1, 1)
*/
```



## <span style='color: #68218a;'>Develop a **C++** function in a `.cpp` file</span> {background-color="#bf3eff"}

::: {.callout-caution title="Your turn!"}
Consider a Gaussian random walk:
$$
y_t = y_{t-1} + \varepsilon_t, \qquad \varepsilon_t \sim N(0,1), \qquad y_0 = 0
$$
Develop a **C++** function using **RcppArmadillo** that:

* has an integer `T` as the only argument
* returns a `T`-vector of type `vec` with Gaussian random walk\

Get some help [HERE](http://arma.sourceforge.net/docs.html).
:::



## <span style='color: #68218a;'>Some stats with RcppArmadillo: linear regression</span> {background-color="#bf3eff"}

Contents of a `nicelr.cpp` file:

```{Rcpp nicelr}
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]
using namespace arma;

// [[Rcpp::export]]
vec nicelr (vec y, mat x) {
  vec beta_hat = solve(x.t() * x, x.t() * y);
  return beta_hat;
}

/*** R
x = cbind(rep(1,5),1:5); y = x %*% c(1,2) + rnorm(5)
nicelr(y, x)
*/
```


## <span style='color: #68218a;'>Some stats with RcppArmadillo: linear regression</span> {background-color="#bf3eff"}

::: {.callout-caution title="Your turn!"}
Extend the `nicelr` function to return the error term variance:
$$
\hat\sigma^2 = \frac{1}{T} \left( Y - \hat\beta X \right)'\left( Y - \hat\beta X \right)
$$

* don't adjust the arguments
* return `beta_hat` and `sigma2_hat` in a list

Get some help [HERE](http://arma.sourceforge.net/docs.html).

Hint: use functions `as_scalar()`, `.t()` and `.n_elem`.
:::



## <span style='color: #68218a;'>Some stats with RcppArmadillo: limulation smoother</span> {background-color="#bf3eff"}

::: {.callout-caution title="Additional resources!"}
Have a look at my article on [*Simulation Smoother using RcppArmadillo*](https://gallery.rcpp.org/articles/simulation-smoother-using-rcpparmadillo/) at *Rcpp Gallery*.
:::






# <span style='color: #68218a;'>What's next?</span> {background-color="#bf3eff"}

## <span style='color: #68218a;'>What's next?</span> {background-color="#bf3eff"}

* Keep programming in **C++** for **R** applications
* Revise solutions to our exercises:
  * [`nicex1.cpp`](https://github.com/donotdespair/w4UKR_cpp4Rapp/blob/master/nicex1.cpp)
  * [`nicex2.cpp`](https://github.com/donotdespair/w4UKR_cpp4Rapp/blob/master/nicex2.cpp)
  * [`nicex3.cpp`](https://github.com/donotdespair/w4UKR_cpp4Rapp/blob/master/nicex3.cpp)
  * [`nicex4.cpp`](https://github.com/donotdespair/w4UKR_cpp4Rapp/blob/master/nicex4.cpp)
* Reach out for help
* Read the documentation of the **C++** libraries you're about to use
* Study the **Rcpp** family of packages
* Study **openMP** to facilitate parallel computing
* Rewrite the **R** function that is the bottleneck in your code in **C++**
* Write an **R** package with **C++** code using **Rcpp** and **RcppArmadillo** [[15steps2nicepackage]](https://github.com/donotdespair/15steps2nicepackage)








## <span style='color: #68218a;'>What's next?</span> {background-color="#bf3eff"}

$$ $$

### <span style='color: #68218a;'>Rewrite all your code in Rcpp!</span>

$$ $$

### <span style='color: #68218a;'>Nice!</span>



##  {background-color="#bf3eff"}

![](social.png){.absolute top=10 right=10 width="1000"}